@layout AuthLayout
@page "/todos"

@using WebTodo.Provider
@using WebTodo.ViewModels.Todo
@using System.Net.Http.Headers
@inject ILocalStorageService localStorage
@inject AuthenticationStateProvider _authenticationStateProvider
@inject NotificationService notification
@inject NavigationManager _navigationManager
@inject HttpClient _http
@inject DialogService _dialogService
@rendermode InteractiveServer

<AuthorizeView Roles="User">
    <Authorized>
        <RadzenTemplateForm Context="form_context" TItem="CreateNewTodoViewModel" Data="@newTodoViewModel" Submit="@OnSubmit">
            <RadzenStack Orientation="Orientation.Horizontal">
                <RadzenColumn Style="width: 100%;">
                    <RadzenFormField Style="width: 100%;">
                        <RadzenTextBox Name="newTodo" @bind-Value="@newTodoViewModel.Title" Style="width: 100%;" />
                    </RadzenFormField>
                    <RadzenRequiredValidator Component="newTodo" Text="Preencha o campo" />
                </RadzenColumn>
                <RadzenStack>
                    <RadzenButton Text="Adicionar" ButtonType="ButtonType.Submit" Style="height:var(--rz-input-height);margin-top: 8px;" />
                </RadzenStack>
            </RadzenStack>
        </RadzenTemplateForm>
        
        <RadzenBadge BadgeStyle="BadgeStyle.Light" Style="text-transform:none;" class="rz-my-4">
            <RadzenStack Orientation="Orientation.Horizontal">
                <RadzenText Style="margin-bottom:0;">Total de tarefas - @todos.Count</RadzenText>
            </RadzenStack>
        </RadzenBadge>

        <RadzenTabs Change="() => {}" TabPosition="TabPosition.Top" RenderMode="TabRenderMode.Server">
            <Tabs>
                <RadzenTabsItem Text="À Fazer">
                    @if (todos.Where(t => t.isCompleted is false).Count() == 0)
                    {
                        <RadzenCard class="rz-mt-6">
                            <RadzenStack AlignItems="AlignItems.Center">
                                <RadzenText TextStyle="TextStyle.DisplayH5">Não possui nenhuma tarefa à fazer.</RadzenText>
                                <RadzenImage Style="width:64px;" Path="tarefa.png" />
                            </RadzenStack>
                        </RadzenCard>
                    }

                    @foreach (var todo in todos.Where(t => t.isCompleted == false))
                    {
                        <RadzenCard class="rz-my-8">
                            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween">
                                <RadzenStack>
                                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start" Gap="0">
                                        <RadzenCheckBox @bind-Value="@todo.isCompleted" Name="CheckBox1" TValue="bool" Change="@(() => @OnChangedCompleted(todo.id))" />
                                        <RadzenLabel Text="@todo.title" Component="CheckBox1" class="rz-ms-2" Style="margin-top:-3px; text-align:justify;" />
                                    </RadzenStack>
                                    <RadzenBadge BadgeStyle="BadgeStyle.Info" Shade="Shade.Dark" IsPill="true" Style="width:fit-content;" class="rz-p-1">
                                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.25rem" Style="padding: 0 0.25rem 0 0; text-transform: none;">
                                            <RadzenIcon Icon="date_range" Style="font-size: 1rem" /> Criado em: @DateOnly.Parse(todo.createdOn)
                                        </RadzenStack>
                                    </RadzenBadge>
                                </RadzenStack>
                                <RadzenStack>
                                    <RadzenButton ButtonStyle="ButtonStyle.Warning" Size="ButtonSize.Small" Style="width:6rem; padding:4px;" Click="@(() => OpenDialogUpdateTitle(todo.id))">
                                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.25rem" Style="padding: 0 0.25rem 0 0;">
                                            <RadzenIcon Icon="launch" Style="font-size: 1rem" /> Editar
                                        </RadzenStack>
                                    </RadzenButton>
                                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Small" Style="width:6rem; padding:4px;"
                                                  Click=@(args => DeleteTodo(todo.id))>
                                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.25rem" Style="padding: 0 0.25rem 0 0;">
                                            <RadzenIcon Icon="delete" Style="font-size: 1rem" /> Deletar
                                        </RadzenStack>
                                    </RadzenButton>
                                </RadzenStack>
                            </RadzenStack>
                        </RadzenCard>
                    }
                </RadzenTabsItem>
                <RadzenTabsItem Text="Completas">
                    @if (todos.Where(t => t.isCompleted is true).Count() == 0)
                    {
                        <RadzenCard class="rz-mt-6">
                            <RadzenStack AlignItems="AlignItems.Center">
                                <RadzenText TextStyle="TextStyle.DisplayH5">Não possui nenhuma tarefa completa.</RadzenText>
                                <RadzenImage Style="width:64px;" Path="tarefa.png" />
                            </RadzenStack>
                        </RadzenCard>
                    }

                    @foreach (var todo in todos.Where(t => t.isCompleted == true))
                    {
                        <RadzenCard class="rz-my-8">
                            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween">
                                <RadzenStack>
                                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start" Gap="0">
                                        <RadzenCheckBox @bind-Value="@todo.isCompleted" Name="CheckBox2" TValue="bool" Change="@(() => @OnChangedCompleted(todo.id))" />
                                        <RadzenLabel Text="@todo.title" Component="CheckBox2" class="rz-ms-2" Style="margin-top:-3px; text-align:justify;" />
                                    </RadzenStack>
                                    <RadzenBadge BadgeStyle="BadgeStyle.Info" Shade="Shade.Dark" IsPill="true" Style="width:fit-content;" class="rz-p-1">
                                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.25rem" Style="padding: 0 0.25rem 0 0; text-transform: none;">
                                            <RadzenIcon Icon="date_range" Style="font-size: 1rem" /> Criado em: @DateOnly.Parse(todo.createdOn)
                                        </RadzenStack>
                                    </RadzenBadge>
                                </RadzenStack>
                                <RadzenStack>
                                    <RadzenButton ButtonStyle="ButtonStyle.Warning" Size="ButtonSize.Small" Style="width:6rem; padding:4px;" Click="@(() => OpenDialogUpdateTitle(todo.id))">
                                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.25rem" Style="padding: 0 0.25rem 0 0;">
                                            <RadzenIcon Icon="launch" Style="font-size: 1rem" /> Editar
                                        </RadzenStack>
                                    </RadzenButton>
                                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Small" Style="width:6rem; padding:4px;"
                                                  Click=@(args => DeleteTodo(todo.id))>
                                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.25rem" Style="padding: 0 0.25rem 0 0;">
                                            <RadzenIcon Icon="delete" Style="font-size: 1rem" /> Deletar
                                        </RadzenStack>
                                    </RadzenButton>
                                </RadzenStack>
                            </RadzenStack>
                        </RadzenCard>
                    }
                </RadzenTabsItem>
            </Tabs>
        </RadzenTabs>
    </Authorized>
    <NotAuthorized>
        <p>Sem autorização</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    List<TodosViewModel> todos { get; set; } = [];
    CreateNewTodoViewModel newTodoViewModel = new();
    RadzenTemplateForm<CreateNewTodoViewModel> form = new RadzenTemplateForm<CreateNewTodoViewModel>();

    private async void OnChangedCompleted(string id)
    {
        var response = await _http.PatchAsync($"/todo/{id}/complete", null);
        if (response.StatusCode == HttpStatusCode.OK)
        {

        } else
        {            
        NotificationMessage message = new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Falha",
                        Detail = "Não foi possivel marcar tarefa como completa/incompleta!",
                        Duration = 3000
                    };
                notification.Notify(message);}
    }

    protected override async void OnInitialized()
    {         
        var token = await localStorage.GetItemAsync<string>("accessToken");
        _http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        if (!string.IsNullOrEmpty(token))
        {
            var authStateProvider = (AuthStateProvider)_authenticationStateProvider;
            authStateProvider.NotifyAuthState(token);
        }

        var response = await _http.GetAsync("/todo");
        if (response.StatusCode == HttpStatusCode.OK)
        {
            var content = await response.Content.ReadFromJsonAsync<List<TodosViewModel>>();
            todos.AddRange(content!);
            StateHasChanged();
        }
        else if (response.StatusCode == HttpStatusCode.Unauthorized)
        {
            _navigationManager.NavigateTo("/login", true);
        }
    }

    async void OnSubmit(CreateNewTodoViewModel createNewTodoViewModel)
    {
        if (form.IsValid)
        {
            var jsonPayload = JsonSerializer.Serialize(newTodoViewModel);
            var requestContent = new StringContent(jsonPayload, Encoding.UTF8, "application/json");

            var response = await _http.PostAsync("/todo", requestContent);
            if (response.StatusCode == HttpStatusCode.OK)
            {
                var result = await response.Content.ReadFromJsonAsync<TodosViewModel>();
                todos.Add(result!);
                newTodoViewModel.Title = "";
                StateHasChanged();

            }
            else
            {
                var result = await response.Content.ReadAsStringAsync();
                ShowNotificationErrorCreateTodo(result);
            }
        }
    }

    private void ShowNotificationErrorCreateTodo(string detail)
    {
        NotificationMessage message = new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Ocorreu um erro",
                Detail = detail,
                Duration = 3000
            };

        notification.Notify(message);
    }

    private record ResultContent
    {
        public string message { get; set; } = string.Empty;
    }

    private async void DeleteTodo(string id)
    {
        var dialog = await _dialogService.Confirm("Tem certeza?", "Deletar tarefa", new ConfirmOptions()
            {
                OkButtonText = "Sim",
                CancelButtonText = "Não",
                ShowClose = false
            });

        if (dialog.HasValue && dialog.Value)
        {
            var response = await _http.DeleteAsync($"/todo/{id}");
            if (response.StatusCode == HttpStatusCode.NotFound)
            {
                var content = await response.Content.ReadFromJsonAsync<ResultContent>();

                NotificationMessage message = new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Ocorreu um erro",
                        Detail = content!.message,
                        Duration = 3000
                    };

                notification.Notify(message);
            }
            else if (response.StatusCode == HttpStatusCode.OK)
            {

                NotificationMessage message = new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Sucesso",
                        Detail = "Tarefa deletada!",
                        Duration = 3000
                    };
                notification.Notify(message);
                var todoToBeDeleted = todos.Where(t => t.id.Equals(id)).FirstOrDefault();
                todos.Remove(todoToBeDeleted!);
                StateHasChanged();
            }
        }
    }

    private async Task OpenDialogUpdateTitle(string id)
    {
        dynamic result = await _dialogService.OpenAsync<DialogUpdateTitle>("Atualizar tarefa", new Dictionary<string, object>() { { "Id", id } });
        if(result is string)
        {
            var indexTodo = todos.FindIndex(t => t.id == id);
            todos[indexTodo].title = result;
        }        
    }     
}
